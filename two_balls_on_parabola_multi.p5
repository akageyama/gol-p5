/*

  two_balls_on_parabolas_multi.p5
  
  * シミュレーションモデル  
    - 2つの質点（質量同じ）がそれぞれ別の放物線の上を摩擦なしで滑る。
    - 2つの放物線の方程式は以下の通り：
       放物線1：y = +x^2 + 1
       放物線2：y = -x^2 - 1
    - 2つの質点（質点1と質点2）は線形バネで連結されている。
    - バネの自然長と質量はゼロとする。
    - 重力の影響は無視する。  
  
  * 変数の定義
    - この系の自由度は2である。
    - 質点1のx座標をx1,x1の時間微分（=速度のx成分）をv1とする
    - 質点2も同様。
    - 一般化座標(x1,x2,v1,v2)をGeneralCoordsクラスにまとめた。
  
  * この系のラグランジアンは
           L(x1,x2,v1,v2) = (m/2)*(v1^2+4*x1^2*v1^2)
                          + (m/2)*(v2^2+4*x2^2*v2^2)
                          - (k/2)*s^2,
    ここで以下は作業用の変数：
            s = sqrt(dx^2+dy^2), dx=x1-x2, dy=x1^2+x2^2+2.

  * シミュレーション手法
    - ラグランジュの運動方程式をequation_of_motion()関数で解く。
    - 数値積分には古典的な4次ルンゲ・クッタ法を使う。
    - 座標や物理量はfloat（単精度）浮動小数点数として計算している。
    - 精度確認のため全エネルギーを計算・表示する。
  
  * 可視化
    - P5の線分と円の表示機能を使用。
    - P5ではy軸（+y）の向きが画面の下方向なのでmap関数で反転し、
      y軸+yが画面の上方向になるようにしている。
    - P5のウィンドウ画面を3つの領域に分割して使う。
    - 細かく言えばこの3つの領域の周囲にヘッダとフッタ領域も確保している。
        +------------+------------+------------+
        |            |            |            |
        |     x-y    |    x1-x2   |   x1-v1    |
        |     plot   |     plot   |  Poincare  |
        |(real space)|(Every time |    map     |
        |            |      steps)| (For v2=0) |
        |            |            |            |
        +------------+------------+------------+
       
  * 使用法
    - 初期条件の設定は setup()関数の以下の部分で変更する。
        balls = new GeneralCoords( 質点1のx座標, その時間微分,
                                   質点2のx座標, その時間微分 )
    - キーボードのuキーで計算（表示）の加速。
    - キーボードのdキーで計算（表示）の減速。
    - キーボードのsキーで計算（表示）の一時停止(stop)と再スタート(start)。
    - マウスクリックもstart/stopのトグル。 
    
  * 開発履歴
    - Akira Kageyama (kage@port.kobe-u.ac.jp)
    - June 29, 2023
    - July 05, 2023 ポアンカレマップ（双方向交差→片方向交差）
    - July 08, 2023 Processingコードから変換
  
*/
let VERTICAL_MARGIN = 75;
let HORIZONTAL_MARGIN = 5;
let timez = 0.0;
let step = 0;
let dt = 0.001;
let running_state_toggle = true;
let x_coord_min = -3.0;
let x_coord_max = 3.0;
let speedz = 20;
let balls;
let balls_prev;
let SPRING_K = 1.0;
let PARTICLE_MASS = 1.0;
let OMEGA_SQ = SPRING_K / PARTICLE_MASS;
class Windowz {
    constructor(xmin, ymin, xmax, ymax) {
        this.xmin = xmin;
        this.ymin = ymin;
        this.xmax = xmax;
        this.ymax = ymax;
    }
    background(gray) {
        noStroke();
        fill(gray);
        rect(
            this.xmin,
            this.ymin,
            this.xmax - this.xmin,
            this.ymax - this.ymin
        );
    }
    frame(gray) {
        stroke(gray);
        noFill();
        rect(
            this.xmin,
            this.ymin,
            this.xmax - this.xmin,
            this.ymax - this.xmin
        );
    }
    translate_origin() {
        translate((this.xmax + this.xmin) / 2, (this.ymax + this.ymin) / 2);
    } //
    // |<---------width--------->|
    // .                         .
    // .                         .
    // +-------------------------+ ... ---
    // |    |      VM       |    |     /|\
    // |----+---------------+----|      |
    // |    |               |    |      |
    // |    | VM=Vertical   |    |      |
    // | HM |      Margin   | HM |    height
    // |    | HM=Horizontal |    |      |
    // |    |        Margin |    |      |
    // |----+---------------+----|      |
    // |    |      VM       |    |     \|/
    // +-------------------------+ ... ---
    // (x,y) = physical unit coords.
    // (map(x),map(y)) = pixel coords.
    mapx(x) {
        let scale =
            (this.xmax - this.xmin) / (x_coord_max - x_coord_min);
        return x * scale;
    }
    mapy(y) {
        let y_coord_max = parabola_func_upper(x_coord_max);
        let y_coord_min = -y_coord_max;
        let scale =
            (this.ymax - this.ymin) / (y_coord_max - y_coord_min);
        return -scale * y; // reverse up/down direction.
    }
    draw_axes_x1_x2() {
        push();
        this.translate_origin();
        stroke(100, 100, 100);
        line(this.mapx(x_coord_min), 0, this.mapx(x_coord_max), 0);
        line(0, this.mapx(x_coord_min), 0, this.mapx(x_coord_max));
        pop();
    }
    draw_balls_on_xyplane(x1, x2) {
        push();
        this.translate_origin();
        stroke(50, 100, 255);
        point(this.mapx(x1), -this.mapx(x2));
        pop();
    }
    draw_parabolas() {
        push();
        this.translate_origin();
        let nx = 500;
        let dx = (x_coord_max - x_coord_min) / nx;
        let x_prev = x_coord_min;
        let y_prev = parabola_func_upper(x_prev);
        for (let i = 1; i <= nx; i++) {
            // starts from i=1.
            let x = x_coord_min + dx * i;
            let y = parabola_func_upper(x);
            if (i % 12 <= 6) stroke(100, 100, 100);
            else stroke(255, 255, 255);
            line(
                this.mapx(x_prev),
                this.mapy(y_prev),
                this.mapx(x),
                this.mapy(y)
            );
            x_prev = x;
            y_prev = y;
        }
        x_prev = x_coord_min;
        y_prev = parabola_func_lower(x_prev);
        for (let i = 1; i <= nx; i++) {
            // starts from i=1.
            let x = x_coord_min + dx * i;
            let y = parabola_func_lower(x);
            if (i % 12 <= 6) stroke(100, 100, 100);
            else stroke(255, 255, 255);
            line(
                this.mapx(x_prev),
                this.mapy(y_prev),
                this.mapx(x),
                this.mapy(y)
            );
            x_prev = x;
            y_prev = y;
        }
        pop();
    }
    draw_balls_on_parabolas(x1, x2) {
        push();
        this.translate_origin();
        stroke(50);
        fill(255, 210, 150);
        let y1 = parabola_func_upper(x1);
        ellipse(this.mapx(x1), this.mapy(y1), 10, 10);
        fill(150, 230, 255);
        let y2 = parabola_func_lower(x2);
        ellipse(this.mapx(x2), this.mapy(y2), 10, 10);
        pop();
    }
    draw_poincare_x1_x2(x1, x2) {
        push();
        this.translate_origin();
        stroke(255, 100, 100);
        point(this.mapx(x1), -this.mapx(x2));
        pop();
    }
    draw_poincare_x1_v1(x1, v1) {
        let factor = 0.8; // trial and errors.
        push();
        this.translate_origin();
        stroke(0, 150, 0);
        point(factor * this.mapx(x1), -factor * this.mapx(v1));
        pop();
    }
    draw_spring() {
        push();
        this.translate_origin();
        stroke(0, 150, 0);
        let x1 = balls.x1;
        let y1 = parabola_func_upper(x1);
        let x2 = balls.x2;
        let y2 = parabola_func_lower(x2);
        line(this.mapx(x1), this.mapy(y1), this.mapx(x2), this.mapy(y2));
        pop();
    }
    label_x_axis(msg) {
        push();
        this.translate_origin();
        fill(0, 0, 0);
        textAlign(RIGHT);
        text(msg, this.mapx(x_coord_max), -6);
        pop();
    }
    label_y_axis(msg) {
        push();
        this.translate_origin();
        fill(0, 0, 0);
        textAlign(CENTER);
        text(msg, this.mapx(0), -this.mapx(x_coord_max) - 6);
        pop();
    }
}
class Header {
    erase(gray) {
        fill(gray);
        rect(0, 0, width, VERTICAL_MARGIN);
    }
    title(msg, rlc) {
        // rlc = RIGHT or LEFT or CENTER
        noStroke();
        push();
        fill(0, 0, 0);
        textAlign(rlc);
        text(msg, 0, textWidth(" "), width, VERTICAL_MARGIN);
        pop();
    }
}
class Footer {
    erase(gray) {
        noStroke();
        fill(gray);
        rect(0, height - VERTICAL_MARGIN, width, VERTICAL_MARGIN);
    }
    title(msg, rlc) {
        // rlc = RIGHT or LEFT or CENTER
        noStroke();
        push();
        fill(0, 0, 0);
        textAlign(rlc);
        text(
            msg,
            0,
            height - VERTICAL_MARGIN + textWidth(" "),
            width,
            VERTICAL_MARGIN
        );
        pop();
    }
}

let header = new Header();
let footer = new Footer();
let windowz;

class GeneralCoords {
    constructor(x1, v1, x2, v2) {
        this.x1 = x1;
        this.v1 = v1;
        this.x2 = x2;
        this.v2 = v2;
    } /*constructor( ) { this.x1= 0.0; this.v1= 0.0; this.x2= 0.0; this.v2= 0.0; } */ /*constructor( copy ) { this.x1= copy . x1; this.v1= copy . v1; this.x2= copy . x2; this.v2= copy . v2; } */
}

function setup() {
    createCanvas(1200, 600);
    background(255);
    frameRate(60); // windowz = new Windowz[3];
    //    0  x0l       x0r x1l     x1r x2l      x2r  width
    //    |   |         | | |       | | |        |   |
    //    |   |         | | |       | | |        |   |
    //    |H_M|---------|H_M|-------|H_M|--------|H_M|
    //    |   |         | | |       | | |        |   |
    //    | "H_M" = HORIZONTAL_MARGIN            |   |
    //    |   |         | | |       | | |        |   |
    let each_window_width = (width - 4 * HORIZONTAL_MARGIN) / 3;
    let x0l = HORIZONTAL_MARGIN;
    let x0r = x0l + each_window_width;
    let x1l = x0r + HORIZONTAL_MARGIN;
    let x1r = x1l + each_window_width;
    let x2l = x1r + HORIZONTAL_MARGIN;
    let x2r = x2l + each_window_width; //
    //   +----                       y=0
    //   |  VERTICAL_MARGIN
    //   +----                       y=y1
    //   |
    //   |
    //   |
    //   |
    //   |
    //   +----                       y=y2
    //   |  VERTICAL_MARGIN
    //   +----                       y=height
    let y1 = VERTICAL_MARGIN;
    let y2 = height - VERTICAL_MARGIN;
    windowz = new Array(3);
    windowz[0] = new Windowz(x0l, y1, x0r, y2);
    windowz[1] = new Windowz(x1l, y1, x1r, y2);
    windowz[2] = new Windowz(x2l, y1, x2r, y2);
    windowz[1].draw_axes_x1_x2();
    windowz[1].label_x_axis("x1");
    windowz[1].label_y_axis("x2");
    windowz[2].draw_axes_x1_x2();
    windowz[2].label_x_axis("x1");
    windowz[2].label_y_axis("v1");
    header.title(
        "  Two balls on parabolas\n  Particle 1 (upper) and 2 (lower)", LEFT
    );
    header.title("  Path plot of (x1,x2)", CENTER);
    header.title("Poincare map of (x1,v1) on v2=0  ", RIGHT); //// 線形（微小）単振動
    //      balls = new GeneralCoords( x_coord_max*0.05,0,  // x1 & v1
    //                                 x_coord_max*0.05,0); // x2 & v2
    //// 線形（微小）振動
    //    balls = new GeneralCoords( x_coord_max*0.1,0,  // x1 & v1
    //                              -x_coord_max*0.05,0); // x2 & v2
    //// 非線形単一周期運動
    //    balls = new GeneralCoords( x_coord_max*0.4,0,  // x1 & v1
    //                              -x_coord_max*0.4,0); // x2 & v2
    //// 比較的単純な非線形運動
    //    balls = new GeneralCoords( x_coord_max*0.4,0,  // x1 & v1
    //                              -x_coord_max*0.2,0); // x2 & v2
    // 複雑な運動
    balls = new GeneralCoords(
        x_coord_max * 0.4,
        0, // x1 & v1
        -x_coord_max * 0.1,
        0
    ); // x2 & v2
    balls_prev = new GeneralCoords();
}
function total_energy() {
    let x1 = balls.x1;
    let v1 = balls.v1;
    let x2 = balls.x2;
    let v2 = balls.v2;
    let v1sq = v1 * v1;
    let v2sq = v2 * v2;
    let y1 = parabola_func_upper(x1);
    let y2 = parabola_func_lower(x2);
    let y1dot = parabola_func_upper_derivative(x1) * v1;
    let y2dot = parabola_func_lower_derivative(x2) * v2;
    let y1dotsq = y1dot * y1dot;
    let y2dotsq = y2dot * y2dot;
    let s = sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
    let kinetic_e = 0.5 * PARTICLE_MASS * (v1sq + y1dotsq + v2sq + y2dotsq);
    let potential = 0.5 * SPRING_K * (s * s);
    return kinetic_e + potential;
}
function rungekutta_advance(b, b1, db, factor) {
    b.x1 = b1.x1 + factor * db.x1;
    b.v1 = b1.v1 + factor * db.v1;
    b.x2 = b1.x2 + factor * db.x2;
    b.v2 = b1.v2 + factor * db.v2;
}
function equation_of_motion(b, db, dt) {
    //    Lagrangian
    //       L(x1,x2,v1,v2) = (m/2)*(v1^2+4*x1^2*v1^2)
    //                      + (m/2)*(v2^2+4*x2^2*v2^2)
    //                      - (k/2)*s^2
    //    where
    //        s = sqrt(dx^2+dy^2), dx=x1-x2, dy=x1^2+x2^2+2
    //
    let x1 = b.x1;
    let v1 = b.v1;
    let x2 = b.x2;
    let v2 = b.v2;
    let dx = x1 - x2;
    let x1sq = x1 * x1;
    let v1sq = v1 * v1;
    let x2sq = x2 * x2;
    let v2sq = v2 * v2;
    let dy = x1sq + x2sq + 2;
    let f1 = OMEGA_SQ * (dx + 2 * x1 * dy);
    let f2 = OMEGA_SQ * (-dx + 2 * x2 * dy);
    db.x1 = v1 * dt;
    db.v1 = (-1.0 / (1 + 4 * x1sq)) * (4 * x1 * v1sq + f1) * dt;
    db.x2 = v2 * dt;
    db.v2 = (-1.0 / (1 + 4 * x2sq)) * (4 * x2 * v2sq + f2) * dt;
}
function runge_kutta4() {
    let ONE_SIXTH = 1.0 / 6.0;
    let ONE_THIRD = 1.0 / 3.0;
    let work = new GeneralCoords();
    let db01 = new GeneralCoords();
    let db02 = new GeneralCoords();
    let db03 = new GeneralCoords();
    let db04 = new GeneralCoords();
    balls_prev.x1 = balls.x1;
    balls_prev.v1 = balls.v1;
    balls_prev.x2 = balls.x2;
    balls_prev.v2 = balls.v2; //step 1
    equation_of_motion(balls_prev, db01, dt);
    rungekutta_advance(work, balls_prev, db01, 0.5); //step 2
    equation_of_motion(work, db02, dt);
    rungekutta_advance(work, balls_prev, db02, 0.5); //step 3
    equation_of_motion(work, db03, dt);
    rungekutta_advance(work, balls_prev, db03, 1.0); //step 4
    equation_of_motion(work, db04, dt); //the result
    balls.x1 =
        balls_prev.x1 +
        (ONE_SIXTH * db01.x1 +
            ONE_THIRD * db02.x1 +
            ONE_THIRD * db03.x1 +
            ONE_SIXTH * db04.x1);
    balls.v1 =
        balls_prev.v1 +
        (ONE_SIXTH * db01.v1 +
            ONE_THIRD * db02.v1 +
            ONE_THIRD * db03.v1 +
            ONE_SIXTH * db04.v1);
    balls.x2 =
        balls_prev.x2 +
        (ONE_SIXTH * db01.x2 +
            ONE_THIRD * db02.x2 +
            ONE_THIRD * db03.x2 +
            ONE_SIXTH * db04.x2);
    balls.v2 =
        balls_prev.v2 +
        (ONE_SIXTH * db01.v2 +
            ONE_THIRD * db02.v2 +
            ONE_THIRD * db03.v2 +
            ONE_SIXTH * db04.v2);
}
function parabola_func_upper(x) {
    // When you change this, revise its derivative
    // parabola_func_upper_derivative(), too.
    let y;
    y = x * x + 1;
    return y;
}
function parabola_func_upper_derivative(x) {
    // When you change this, revise
    // parabola_func_upper(), too.
    let y;
    y = 2 * x;
    return y;
}
function parabola_func_lower(x) {
    // When you change this, revise its derivative
    // parabola_func_lower_derivative(), too.
    let y;
    y = -x * x - 1;
    return y;
}
function parabola_func_lower_derivative(x) {
    // When you change this, revise
    // parabola_func_upper(), too.
    let y = -2 * x;
    return y;
}
function draw() {
    windowz[0].background(255);
    windowz[0].draw_parabolas();
    if (running_state_toggle) {
        for (let icnt = 0; icnt < speedz; icnt++) {
            runge_kutta4();
            timez += dt;
            step += 1;
            windowz[1].draw_balls_on_xyplane(balls.x1, balls.x2);
            let cross_before = balls_prev.v2; // for Poincare
            let cross_after = balls.v2; // cross section.
            if (cross_before < 0 && cross_after > 0) {
                //   |              .
                // va|____________.
                //   |          . |
                //   |        .   |
                // --+-xb---.-----xa------>x
                //   |  | .  \
                // vb|__.     x=xb-vb*(xa-xb)/(va-vb)
                //   |.       (See below.)
                //
                // The equation of the linear function is
                //       v(x) = (va-vb)/(xa-xb) * (x-xb) + vb.
                // Solving
                //       v(x) = 0,
                // We get
                //       x = xb-vb*(xa-xb)/(va-vb)
                //         = xb+weight*(xa-xb)  [weight=-vb/(va-vb)]
                //         = weight*xa + (1-weight)*xb
                let wa = -cross_before / (cross_after - cross_before);
                let wb = 1 - wa;
                let xx1 = wa * balls.x1 + wb * balls_prev.x1;
                let xx2 = wa * balls.x2 + wb * balls_prev.x2;
                let vv1 = wa * balls.v1 + wb * balls_prev.v1; //          windowz[2].draw_poincare_x1_x2(xx1,xx2);
                windowz[2].draw_poincare_x1_v1(xx1, vv1);
            }
        } //if ( step%1000 == 0 ) {
        //  println("step = ", step," time = ", timez," energy = ",total_energy());
        //}
    }
    windowz[0].draw_spring();
    windowz[0].draw_balls_on_parabolas(balls.x1, balls.x2);
    let str = "Speed = " + nf(speedz) + "  (Type u/d to speed up/down)";
    str += "\nenergy = " + nf(total_energy(), 4, 3);
    str += "\nt = " + nf(timez, 6, 3);
    str += " (step = " + nf(step, 9) + ")";
    footer.erase(255);
    footer.title(str, CENTER);
}
function mousePressed() {
    running_state_toggle = !running_state_toggle;
}
function keyReleased() {
    switch (key) {
        case "s":
            running_state_toggle = !running_state_toggle;
            break;
        case "u":
            speedz *= 2;
            break;
        case "d":
            speedz /= 2;
            if (speedz <= 0) speedz = 1;
            break;
    }
}

