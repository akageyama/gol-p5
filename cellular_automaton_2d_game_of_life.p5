// 
// Game of Life by p5.js
//       Akira Kageyama, Kobe Univ., Japan
//       2024.11.10
//
// Copy and paste whole this program to "Editor" at
//    https://editor.p5js.org/
// 
// Usage:
//    Keyboard ' ' : Program stop/start toggle.
//    Keyboard 'c' : Clear all the cells.
//    Keyboard 'R' : Reset to "R-pentomino".
//    Keyboard 'P' : Reset to "Pentadecathlon".
//    Keyboard 'A' : Reset to "Acorn".
//    Keyboard 'G' : Reset to "Glider".
//


const cellSize = 6; // pixel size of a cell
const NX = 100;     // number of cells in x
const NY = 100;     //                 in y
const NXNY = NX*NY;

var cells;          // (Practically) 2-D array of cells
var cellsCopy;      // Copy buffer of the cells

var step;

var runningStateToggle = 0;


function toggle( i )
{
  // 0-->1; 1-->0
  return (i+1) % 2;
}


function ij1d( i, j )  // Used to access 1D array "cells" as 2D array.
{
  return i + j*NX;
}


function boundaryCondition() 
{
  // case 1 "rigid wall" condition
  //
  // for (let j=1; j<NY-1; j++) {
  //   cells[ ij1d(    0, j ) ] = 0;
  //   cells[ ij1d( NX-1, j ) ] = 0;
  // }
  // for (let i=0; i<NX; i++) {
  //   cells[ ij1d( i,    0 ) ] = 0;
  //   cells[ ij1d( i, NY-1 ) ] = 0;
  // }
  // "rigid wall" condition

  // case 2 periodic boundary condition
  for (let j=1; j<NY-1; j++) {
    cells[ ij1d(    0, j ) ] = cells[ ij1d( NX-2, j ) ];
    cells[ ij1d( NX-1, j ) ] = cells[ ij1d(    1, j ) ];
  }
  for (let i=0; i<NX; i++) {
    cells[ ij1d( i,    0 ) ] = cells[ ij1d( i, NY-2) ];
    cells[ ij1d( i, NY-1 ) ] = cells[ ij1d( i,    1) ];
  }
}


function copyCells() 
{
  for ( let j=0; j<NY; j++ ) {
    for ( let i=0; i<NX; i++) {
      cellsCopy[ ij1d( i, j) ]  = cells[ ij1d( i, j) ] ;
    }
  }
}


function clearAllCells()
{
  for ( let j=0; j<NY; j++) {
    for ( let i=0; i<NX; i++) {
      cells[     ij1d( i, j ) ]  = 0;
      cellsCopy[ ij1d( i, j ) ]  = 0;
    }
  }
}

function initializeAllCells( type )
{
  switch ( type ) {
    case 'R':
      // R-pentomino.
      superimpose_R_pentomino( NX/2, NY/2 );
      break;    
    case 'P':
      // Pentadecathlon.
      superimpose_pentadecathlon( NX/2, NY/2 );
      break;
    case 'A':
      // Acorn.
      superimpose_acorn( NX/2, NY/2 );
      break;      
    case 'G':
      // Glider.
      superimpose_glider( NX/2, NY/2 );
      break;      
    case 'r':
      // random
      superimpose_random();
      break;      
    case 'x':
      // glider gun
      superimpose_glider_gun( 10, 10 );
      break;      
  }
  boundaryCondition();
  copyCells();
}


function setup() 
{
  step = 0;
  
  createCanvas(cellSize*NX, cellSize*NY); 
  cells     = new Array(NXNY);
  cellsCopy = new Array(NXNY);

  print( "Starting..." );


  // Gray curve around each cell circle
  stroke(100);

  // Anti-aliasing  
  smooth(8);

  clearAllCells();
  
  initializeAllCells( 'G' );
}


function draw() 
{  
  background(210, 230, 255);

  draw_cells();
  lastRecordedTime = 0; // Used to puase the run.
  
  if ( runningStateToggle ) {
      step++;
      // print( " step = " + step );
      stepTime();
  }    
}


function keyPressed() 
{
  switch ( key ) {
    case ' ':  
      runningStateToggle = toggle( runningStateToggle );
      if ( runningStateToggle == 1 ) {
        print( "Running." );
      } else {
        print( "Stop." );
      }
      break;    
    case 'R':
      runningStateToggle = 0;
      initializeAllCells( 'R' );
      break;
    case 'P':
      runningStateToggle = 0;
      initializeAllCells( 'P' );
      break;
    case 'A':
      runningStateToggle = 0;
      initializeAllCells( 'A' );
      break;
    case 'G':
      runningStateToggle = 0;
      initializeAllCells( 'G' );
      break;
    case 'c':
      runningStateToggle = 0;
      clearAllCells();
      break;
    case 'r':
      runningStateToggle = 0;
      superimpose_random();
      break;      
    case 'x':
      runningStateToggle = 0;
      initializeAllCells( 'x' );
      break;      
  }
}


// function mouseClicked()
// {
//   // Turn the cell on.
//   let i = int(( mouseX - 0.5*cellSize ) / cellSize);
//   let j = int(( mouseY - 0.5*cellSize ) / cellSize);
//   // print("i: " + i + " j = " + j);  
//     
//   cells[ ij1d(i,j) ] = toggle( cells[ij1d(i,j)] );
// }


function draw_cells() 
{
  for (let j=0; j<NY; j++) {
    for (let i=0; i<NX; i++) {
      if (cells[ ij1d( i, j ) ]  == 1) {
        place_alive_cell( i, j );
      } else {
        place_dead_cell( i, j );
      }
    }
  }
}


function stepTime() 
{  
  for ( let j=1; j<NY-1; j++) {
    for ( let i=1; i<NX-1; i++) {
      var neighbours = 0; // Number of alive neighboours.
      for ( let ii=i-1; ii<=i+1; ii++) {
        for ( let jj=j-1; jj<=j+1; jj++) {  
          if ((ii==i)&&(jj==j)) continue;
          if (cellsCopy[ ij1d( ii, jj ) ]==1) {
            neighbours ++;
          }
        }
      }
      if (cellsCopy[ ij1d( i, j) ] ==1) { // The cell is alive.
        if (neighbours < 2 || neighbours > 3) {
          cells[ ij1d( i, j ) ] = 0; // Die unless it has 2 or 3 neighbours
        }
      } else { // The cell is dead.      
        if (neighbours == 3 ) {
          cells[ ij1d( i,j ) ]  = 1; // Only if it has 3 neighbours
        }
      }
    }
  }

  boundaryCondition();
  copyCells();
}

function place_alive_cell( i,  j) 
{
  fill(0); // black
  ellipse(i*cellSize+0.5*cellSize, j*cellSize+0.5*cellSize, 
          cellSize, cellSize);
}



function place_dead_cell(  i,  j) 
{
  fill(255); // white 
  ellipse(i*cellSize+0.5*cellSize, j*cellSize+0.5*cellSize, 
          cellSize, cellSize);
}



function superimpose_R_pentomino( i0, j0 )
{
  for ( let j=1; j<NY-1; j++ ) {
    for ( let i=1; i<NX-1; i++ ) {
      if ( j==j0   && i==i0   ) cells[ ij1d( i, j) ] = 1;
      if ( j==j0   && i==i0-1 ) cells[ ij1d( i, j) ] = 1;
      if ( j==j0   && i==i0+1 ) cells[ ij1d( i, j) ] = 1;
      if ( j==j0-1 && i==i0   ) cells[ ij1d( i, j) ] = 1;
      if ( j==j0+1 && i==i0-1 ) cells[ ij1d( i, j) ] = 1;
    }
  }
}


function superimpose_pentadecathlon( i0, j0 )
{
  for ( let j=1; j<NY-1; j++ ) {
    for ( let i=1; i<NX-1; i++ ) {
      if ( i==i0-4 && j==j0   ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0-3 && j==j0   ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0-2 && j==j0-1 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0-2 && j==j0+1 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0-1 && j==j0   ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0   && j==j0   ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+1 && j==j0   ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+2 && j==j0   ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+3 && j==j0-1 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+3 && j==j0+1 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+4 && j==j0   ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+5 && j==j0   ) cells[ ij1d( i, j) ] = 1;
    }
  }  
}

function superimpose_glider( i0, j0 )
{
  for ( let j=1; j<NY-1; j++ ) {
    for ( let i=1; i<NX-1; i++ ) {
      if ( i==i0-1 && j==j0+1 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0   && j==j0+1 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+1 && j==j0+1 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+1 && j==j0   ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0   && j==j0-1 ) cells[ ij1d( i, j) ] = 1;
    }
  }  
}


function superimpose_acorn( i0, j0 )
{
  for ( let j=1; j<NY-1; j++ ) {
    for ( let i=1; i<NX-1; i++ ) {
      if ( i==i0-3 && j==j0+1 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0-2 && j==j0+1 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+1 && j==j0+1 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+2 && j==j0+1 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+3 && j==j0+1 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0   && j==j0   ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0-2 && j==j0-1 ) cells[ ij1d( i, j) ] = 1;
    }
  }  
}


function superimpose_random()
{
  let ratio = 0.15;

  for ( let i=1; i<NX-1; i++) {
    for ( let j=1; j<NY-1; j++) {
      let state = random();
      if ( state > ratio ) {
        cells[ ij1d( i, j) ] = 0;
      } else {
        cells[ ij1d( i, j) ] = 1;
      }
    }
  }
  copyCells();
}


function superimpose_glider_gun( i0, j0 )
{
  for ( let j=1; j<NY-1; j++ ) {
    for ( let i=1; i<NX-1; i++ ) {
      if ( i==i0+0  && j==j0+4 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+1  && j==j0+4 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+0  && j==j0+5 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+1  && j==j0+5 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+12 && j==j0+2 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+13 && j==j0+2 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+11 && j==j0+3 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+11 && j==j0+7 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+15 && j==j0+3 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+15 && j==j0+7 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+10 && j==j0+4 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+16 && j==j0+4 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+10 && j==j0+5 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+14 && j==j0+5 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+16 && j==j0+5 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+17 && j==j0+5 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+10 && j==j0+6 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+16 && j==j0+6 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+12 && j==j0+8 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+13 && j==j0+8 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+20 && j==j0+2 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+21 && j==j0+2 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+20 && j==j0+3 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+21 && j==j0+3 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+20 && j==j0+4 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+21 && j==j0+4 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+22 && j==j0+1 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+22 && j==j0+5 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+24 && j==j0+0 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+24 && j==j0+1 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+24 && j==j0+5 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+24 && j==j0+6 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+34 && j==j0+2 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+35 && j==j0+2 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+34 && j==j0+3 ) cells[ ij1d( i, j) ] = 1;
      if ( i==i0+35 && j==j0+3 ) cells[ ij1d( i, j) ] = 1;
    }
  }  
}
