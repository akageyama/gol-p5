/*

  a_ball_bounce_on_parabola_multi.p5
  
  * シミュレーションモデル  
    - 1つの質点が重力を受けて落下する。
    - 下方には下の放物線がある。
        y = a * x^2
    - 質点は放物線に衝突すると反射する。
  
  * 変数の定義
    - 放物線の係数 a は PARABOLA_FACTOR_A
    - 質点の位置を (x,y) とし、速度を(vx,vy) とする。
    - 一般化座標(x,y,vx,vy)をGeneralCoordsクラスにまとめた。
  
  * シミュレーション手法
    - ラグランジュの運動方程式をequation_of_motion()関数で解く。
    - 数値積分には古典的な4次ルンゲ・クッタ法を使う。
    - 座標や物理量はfloat（単精度）浮動小数点数として計算している。
    - 精度確認のため全エネルギーを計算・表示する。
  
  * 可視化
    - P5の線分と円の表示機能を使用。
    - P5ではy軸（+y）の向きが画面の下方向なのでmap関数で反転し、
      y軸+yが画面の上方向になるようにしている。
    - P5のウィンドウ画面を3つの領域に分割して使う。
    - 細かく言えばこの3つの領域の周囲にヘッダとフッタ領域も確保している。
        +------------+------------+------------+
        |            |            |            |
        |     x-y    |    x1-x2   |   x1-v1    |
        |     plot   |     plot   |  Poincare  |
        |(real space)|(Every time |    map     |
        |            |      steps)| (For v2=0) |
        |            |            |            |
        +------------+------------+------------+
       
  * 使用法
    - 初期条件の設定は setup()関数の以下の部分で変更する。
        ball = new GeneralCoords( 質点のx座標, 速度のx成分 vx,
                                  質点のy座標, 速度のy成分 vy )
    - キーボードのuキーで計算（表示）の加速。
    - キーボードのdキーで計算（表示）の減速。
    - キーボードのsキーで計算（表示）の一時停止(stop)と再スタート(start)。
    - マウスクリックもstart/stopのトグル。 
    
  * 開発履歴
    - Akira Kageyama (kage@port.kobe-u.ac.jp)
    - July 08, 2023: a_ball_bounce_on_parabola_multi.pde からp5に変換
    - Oct. 07, 2023: コードを少し整形
  
*/

let VERTICAL_MARGIN = 75;
let HORIZONTAL_MARGIN = 5;
let PARABOLA_FACTOR_A = 0.5;
let timez = 0.0;
let step = 0;
let dt = 0.001;
let running_state_toggle = true;
let x_coord_min = -2.0;
let x_coord_max = 2.0;
let y_coord_min = -2.0;
let y_coord_max = 2.0;
let speedz = 20;
let ball;
let ball_prev;
let PARTICLE_MASS = 1.0;
let GRAVITY_ACCELERATION = 9.8;

class Windowz {

    constructor(xmin, ymin, xmax, ymax) {
        this.xmin = xmin;
        this.ymin = ymin;
        this.xmax = xmax;
        this.ymax = ymax;
    }

    background(gray) {
        noStroke();
        fill(gray);
        rect(
            this.xmin,
            this.ymin,
            this.xmax - this.xmin,
            this.ymax - this.ymin
        );
    }

    frame(gray) {
        stroke(gray);
        noFill();
        rect(
            this.xmin,
            this.ymin,
            this.xmax - this.xmin,
            this.ymax - this.xmin
        );
    }

    translate_origin() {
        translate((this.xmax + this.xmin) / 2, (this.ymax + this.ymin) / 2);
    } 
    //
    // |<---------width--------->|
    // .                         .
    // .                         .
    // +-------------------------+ ... ---
    // |    |      VM       |    |     /|\
    // |----+---------------+----|      |
    // |    |               |    |      |
    // |    | VM=Vertical   |    |      |
    // | HM |      Margin   | HM |    height
    // |    | HM=Horizontal |    |      |
    // |    |        Margin |    |      |
    // |----+---------------+----|      |
    // |    |      VM       |    |     \|/
    // +-------------------------+ ... ---
    // (x,y) = physical unit coords.
    // (map(x),map(y)) = pixel coords.

    mapx(x) {
        let scale =
            (this.xmax - this.xmin) / (x_coord_max - x_coord_min);
        return x * scale;
    }

    mapy(y) {
        let scale =
            (this.ymax - this.ymin) / (y_coord_max - y_coord_min);
        return -scale * y; // reverse up/down direction.
    }

    draw_axes_x1_x2() {
        push();
        this.translate_origin();
        stroke(100, 100, 100);
        line(this.mapx(x_coord_min), 0, this.mapx(x_coord_max), 0);
        line(0, this.mapx(x_coord_min), 0, this.mapx(x_coord_max));
        pop();
    }

    draw_ball_on_xyplane(x, y) {
        push();
        this.translate_origin();
        stroke(50, 100, 255);
        point(this.mapx(x), this.mapy(y));
        pop();
    }

    draw_parabola() {
        push();
        this.translate_origin();
        let nx = 500;
        let dx = (x_coord_max - x_coord_min) / nx;
        let x_prev = x_coord_min;
        let y_prev = parabola(x_prev);
        for (let i = 1; i <= nx; i++) {
            // starts from i=1.
            let x = x_coord_min + dx * i;
            let y = parabola(x);
            stroke(100, 100, 100);
            line(
                this.mapx(x_prev),
                this.mapy(y_prev),
                this.mapx(x),
                this.mapy(y)
            );
            x_prev = x;
            y_prev = y;
        }
        pop();
    }

    draw_the_ball(x, y) {
        push();
        this.translate_origin();
        stroke(50);
        fill(255, 210, 150);
        ellipse(this.mapx(x), this.mapy(y), 10, 10);
        pop();
    }

    draw_poincare_x1_v1(x1, v1) {
        let factor = 0.25; // trials and errors.
        push();
        this.translate_origin();
        stroke(0, 150, 0);
        point(this.mapx(x1), factor * this.mapy(v1));
        pop();
    }

    label_x_axis(msg) {
        push();
        this.translate_origin();
        fill(0, 0, 0);
        textAlign(RIGHT);
        text(msg, this.mapx(x_coord_max), -6);
        pop();
    }

    label_y_axis(msg) {
        push();
        this.translate_origin();
        fill(0, 0, 0);
        textAlign(CENTER);
        text(msg, this.mapx(0), -this.mapx(x_coord_max) - 6);
        pop();
    }
}

class Header {

    erase(gray) {
        fill(gray);
        rect(0, 0, width, VERTICAL_MARGIN);
    }

    title(msg, rlc) {
        // rlc = RIGHT or LEFT or CENTER
        noStroke();
        push();
        fill(0, 0, 0);
        textAlign(rlc);
        text(msg, 0, textWidth(" "), width, VERTICAL_MARGIN);
        pop();
    }
}

class Footer {

    erase(gray) {
        noStroke();
        fill(gray);
        rect(0, height - VERTICAL_MARGIN, width, VERTICAL_MARGIN);
    }

    title(msg, rlc) {
        // rlc = RIGHT or LEFT or CENTER
        noStroke();
        push();
        fill(0, 0, 0);
        textAlign(rlc);
        text(
            msg,
            0,
            height - VERTICAL_MARGIN + textWidth(" "),
            width,
            VERTICAL_MARGIN
        );
        pop();
    }
}

let header = new Header();
let footer = new Footer();
let windowz;

class GeneralCoords {
    x;
    vx;
    y;
    vy;
    constructor(x, vx, y, vy) {
        this.x = x;
        this.vx = vx;
        this.y = y;
        this.vy = vy;
    } /*constructor( ) { this.x= 0.0; this.vx= 0.0; this.y= 0.0; this.vy= 0.0; } */ 
      /*constructor( copy ) { this.x= copy . x; this.vx= copy . vx; this.y= copy . y; this.vy= copy . vy; } */
}

function setup() {

    createCanvas(1200, 600);
    background(255);
    frameRate(60); // window = new Window[3];

    //    0  x0l       x0r x1l     x1r x2l      x2r  width
    //    |   |         | | |       | | |        |   |
    //    |   |         | | |       | | |        |   |
    //    |H_M|---------|H_M|-------|H_M|--------|H_M|
    //    |   |         | | |       | | |        |   |
    //    | "H_M" = HORIZONTAL_MARGIN            |   |
    //    |   |         | | |       | | |        |   |
    //
    let each_window_width = (width - 4 * HORIZONTAL_MARGIN) / 3;
    let x0l = HORIZONTAL_MARGIN;
    let x0r = x0l + each_window_width;
    let x1l = x0r + HORIZONTAL_MARGIN;
    let x1r = x1l + each_window_width;
    let x2l = x1r + HORIZONTAL_MARGIN;
    let x2r = x2l + each_window_width; //

    //   +----                       y=0
    //   |  VERTICAL_MARGIN
    //   +----                       y=y1
    //   |
    //   |
    //   |
    //   |
    //   |
    //   +----                       y=y2
    //   |  VERTICAL_MARGIN
    //   +----                       y=height
    //
    let y1 = VERTICAL_MARGIN;
    let y2 = height - VERTICAL_MARGIN;

    windowz = new Array(3);
    windowz[0] = new Windowz(x0l, y1, x0r, y2);
    windowz[1] = new Windowz(x1l, y1, x1r, y2);
    windowz[2] = new Windowz(x2l, y1, x2r, y2);
    windowz[1].draw_axes_x1_x2();
    windowz[1].label_x_axis("x");
    windowz[1].label_y_axis("y");
    windowz[2].draw_axes_x1_x2();
    windowz[2].label_x_axis("x");
    windowz[2].label_y_axis("vx");

    header.title("  A ball on parabolas", LEFT);
    header.title("  Path plot of (x,y)", CENTER);
    header.title("Poincare map of (x,vx) on vy=0  ", RIGHT); // 自由落下。下に凸な包路線

    ball = new GeneralCoords( 1.0, 0.0,    // x & vx
                              1.5, 0.0 );  // y & vy

    //
    //    // 自由落下2。上に凸な包路線
    //    ball = new GeneralCoords( 0.1, 0.0,  // x & vx
    //                              1.5, 0.0 ); // y & vy
    //
    //    // 投げあげ。往復運動
    //    ball = new GeneralCoords( -1.0, 3.0,  // x & vx
    //                               1.0, 3.0 ); // y & vy
    //    // 水平方向打ち出し。往復運動
    //    ball = new GeneralCoords( 0.0, 3.1,  // x & vx
    //                              1.0, 0.0 ); // y & vy
    //
    //    // 自由落下。二重包路線
    //    ball = new GeneralCoords( 0.2, 0,  // x & vx
    //                              1.5, 0); // y & vy
    //
    //    // y軸上の自由落下。
    //    //     PARABOLA_FACTOR_A = 0.5 の場合、不安定 （H=1.5)
    //    //     PARABOLA_FACTOR_A = 0.17 の場合、安定  （4*a*H > 1.0）
    //    //     PARABOLA_FACTOR_A = 0.15 の場合、不安定 （4*a*H < 1.0）
    //     ball = new GeneralCoords( 0.001, 0.0,  // x & vx
    //                               1.5, 0.0 ); // y & vy
    //

    ball_prev = new GeneralCoords();
}

function total_energy() {
    let vx = ball.vx;
    let vxsq = vx * vx;
    let y = ball.y;
    let vy = ball.vy;
    let vysq = vy * vy;
    let kinetic_e = 0.5 * PARTICLE_MASS * (vxsq + vysq);
    let potential = GRAVITY_ACCELERATION * y;
    return kinetic_e + potential;
}

function rungekutta_advance(b, b1, db, factor) {
    b.x = b1.x + factor * db.x;
    b.vx = b1.vx + factor * db.vx;
    b.y = b1.y + factor * db.y;
    b.vy = b1.vy + factor * db.vy;
}

function equation_of_motion(b, db, dt) {
    //
    //     dx/dt = vx
    //     dy/dt = vy
    //    dvx/dt = 0
    //    dvy/dt = -g
    //
    db.x = b.vx * dt;
    db.vx = 0.0;
    db.y = b.vy * dt;
    db.vy = -GRAVITY_ACCELERATION * dt;
}

function runge_kutta4() {

    let ONE_SIXTH = 1.0 / 6.0;
    let ONE_THIRD = 1.0 / 3.0;
    let work = new GeneralCoords();
    let db01 = new GeneralCoords();
    let db02 = new GeneralCoords();
    let db03 = new GeneralCoords();
    let db04 = new GeneralCoords();

    ball_prev.x = ball.x;
    ball_prev.vx = ball.vx;
    ball_prev.y = ball.y;
    ball_prev.vy = ball.vy; //step 1

    equation_of_motion(ball_prev, db01, dt);
    rungekutta_advance(work, ball_prev, db01, 0.5); //step 2
    equation_of_motion(work, db02, dt);
    rungekutta_advance(work, ball_prev, db02, 0.5); //step 3
    equation_of_motion(work, db03, dt);
    rungekutta_advance(work, ball_prev, db03, 1.0); //step 4
    equation_of_motion(work, db04, dt); //the result

    ball.x = ball_prev.x + (ONE_SIXTH * db01.x +
                            ONE_THIRD * db02.x +
                            ONE_THIRD * db03.x +
                            ONE_SIXTH * db04.x);
    ball.vx = ball_prev.vx + (ONE_SIXTH * db01.vx +
                              ONE_THIRD * db02.vx +
                              ONE_THIRD * db03.vx +
                              ONE_SIXTH * db04.vx);
    ball.y = ball_prev.y + (ONE_SIXTH * db01.y +
                            ONE_THIRD * db02.y +
                            ONE_THIRD * db03.y +
                            ONE_SIXTH * db04.y);
    ball.vy = ball_prev.vy + (ONE_SIXTH * db01.vy +
                              ONE_THIRD * db02.vy +
                              ONE_THIRD * db03.vy +
                              ONE_SIXTH * db04.vy);
}

function interpol_weight(val1, val2) {
    //
    // We assume val1 and val2 have opposite signs, i.e., val1*val2 < 0.
    //
    //      |              .
    //  val2|____________.
    //      |          . |
    //      |        .   |
    //    --+-x1---.-----x2------>x
    //      |  | .  \
    //  val1|__.     x=x2-val2*(x1-x2)/(val1-val2)
    //      |.         (See below.)
    //
    // The equation of the linear function is
    //       v(x) = (val1-val2)/(x1-x2) * (x-x2) + val2.
    // Solving
    //       v(x) = 0,
    // We get
    //       x = x2-v2*(x1-x2)/(v1-v2)
    //         = x2+weight*(x1-x2)
    //         = weight*x1 + (1-weight)*x2
    // where
    //     weight = val2/(val2-val1)
    //
    return val2 / (val2 - val1);
}

function parabola(x) {
    return PARABOLA_FACTOR_A * (x * x);
}

function parabola_derivative(x) {
    return 2 * PARABOLA_FACTOR_A * x;
}

function draw() {
    windowz[0].background(255);
    windowz[0].draw_parabola();
    if (running_state_toggle) {
        for (let icnt = 0; icnt < speedz; icnt++) {
            runge_kutta4();
            timez += dt;
            step += 1;
            windowz[1].draw_ball_on_xyplane(ball.x, ball.y); 
                      // For Poincare map.  When the ball reaches at the top of the orbit.
            if (ball_prev.vy > 0 && ball.vy < 0) {
                let weight_before = interpol_weight(ball_prev.vy, ball.vy);
                let weight_after = 1 - weight_before;
                let xx1 = weight_before * ball_prev.x + weight_after * ball.x;
                let vv1 = weight_before * ball_prev.vx + weight_after * ball.vx;
                windowz[2].draw_poincare_x1_v1(xx1, vv1);
            } // for Relection

            if (ball.y < parabola(ball.x)) {
                //
                //         [I] incoming (input) vector
                //        .
                //       .
                //      .    [R] reflected (output) vector
                //      \   /
                //       \ /
                //   -----*----> [T] tangential_vector
                //         \
                //          \
                //           [I] incoming (input) vector
                //
                let vecIx = ball.vx;
                let vecIy = ball.vy;
                let vecI_amp = sqrt(vecIx * vecIx + vecIy * vecIy);
                let vecIx_normed = vecIx / vecI_amp;
                let vecIy_normed = vecIy / vecI_amp; // A tangential vector of parabola y = x^2/2
                // is given by (vecTx,vecTy) = (1,dy/dx) = (1,x)
                let dydx = parabola_derivative(ball.x);
                let dydx_sq = dydx * dydx;
                let vecTx_amp = sqrt(1 + dydx_sq);
                let vecTx_normed = 1.0 / vecTx_amp;
                let vecTy_normed = dydx / vecTx_amp;
                let z_component_of_vecI_cross_vecT =
                    vecIx_normed * vecTy_normed - vecIy_normed * vecTx_normed;

                if (z_component_of_vecI_cross_vecT > 0) {
                    //
                    // [Usual case]
                    //   The ball comes from outside (above) the parabola.
                    //
                    //         vecT
                    //   vecI   /
                    //  -----> /
                    //        /
                    //
                    // [Anomalous case]
                    //   The ball is inside (below) the parabola. This may
                    //   happen when the ball has just being reflected in the
                    //   previous time step. In this case the ball should continue
                    //   running without reflection.
                    //
                    //         vecT
                    //          /
                    //         / vectI
                    //        /   |
                    //            |
                    //            |
                    //
                    let dot_product_vecI_normed_and_vecT_normed =
                        vecIx_normed * vecTx_normed +
                        vecIy_normed * vecTy_normed;
                    let angle_between_vecI_normed_and_vecT_normed = acos(
                        dot_product_vecI_normed_and_vecT_normed
                    );
                    let angle_for_reflection =
                        2 * angle_between_vecI_normed_and_vecT_normed;
                    let cos_angle = cos(angle_for_reflection);
                    let sin_angle = sin(angle_for_reflection);
                    let vecRx = cos_angle * vecIx - sin_angle * vecIy;
                    let vecRy = sin_angle * vecIx + cos_angle * vecIy;
                    ball.vx = vecRx;
                    ball.vy = vecRy;
                }
            }
        } 
        //if ( step%1000 == 0 ) {
        //  println("step = ", step," time = ", timez," energy = ",total_energy());
        //}
    }
    windowz[0].draw_the_ball(ball.x, ball.y);
    let str = "Speed = " + nf(speedz) + "  (Type u/d to speed up/down)";
    str += "\nenergy = " + nf(total_energy(), 4, 3);
    str += "\nt = " + nf(timez, 6, 3);
    str += " (step = " + nf(step, 9) + ")";
    footer.erase(255);
    footer.title(str, CENTER);
}

function mousePressed() {
    running_state_toggle = !running_state_toggle;
}

function keyReleased() {
    switch (key) {
        case "s":
            running_state_toggle = !running_state_toggle;
            break;
        case "u":
            speedz *= 2;
            break;
        case "d":
            speedz /= 2;
            if (speedz <= 0) speedz = 1;
            break;
    }
}


